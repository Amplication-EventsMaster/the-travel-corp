/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Airline as PrismaAirline,
  Flight as PrismaFlight,
} from "@prisma/client";

export class AirlineServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AirlineCountArgs, "select">): Promise<number> {
    return this.prisma.airline.count(args);
  }

  async airlines<T extends Prisma.AirlineFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AirlineFindManyArgs>
  ): Promise<PrismaAirline[]> {
    return this.prisma.airline.findMany<Prisma.AirlineFindManyArgs>(args);
  }
  async airline<T extends Prisma.AirlineFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AirlineFindUniqueArgs>
  ): Promise<PrismaAirline | null> {
    return this.prisma.airline.findUnique(args);
  }
  async createAirline<T extends Prisma.AirlineCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AirlineCreateArgs>
  ): Promise<PrismaAirline> {
    return this.prisma.airline.create<T>(args);
  }
  async updateAirline<T extends Prisma.AirlineUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AirlineUpdateArgs>
  ): Promise<PrismaAirline> {
    return this.prisma.airline.update<T>(args);
  }
  async deleteAirline<T extends Prisma.AirlineDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AirlineDeleteArgs>
  ): Promise<PrismaAirline> {
    return this.prisma.airline.delete(args);
  }

  async findFlights(
    parentId: string,
    args: Prisma.FlightFindManyArgs
  ): Promise<PrismaFlight[]> {
    return this.prisma.airline
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .flights(args);
  }

  async getArrivalFlights(parentId: string): Promise<PrismaFlight | null> {
    return this.prisma.airline
      .findUnique({
        where: { id: parentId },
      })
      .arrivalFlights();
  }
}
