/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  MessageQueue as PrismaMessageQueue,
  NotificationAttempt as PrismaNotificationAttempt,
  ProcessorLog as PrismaProcessorLog,
} from "@prisma/client";

export class MessageQueueServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MessageQueueCountArgs, "select">
  ): Promise<number> {
    return this.prisma.messageQueue.count(args);
  }

  async messageQueues(
    args: Prisma.MessageQueueFindManyArgs
  ): Promise<PrismaMessageQueue[]> {
    return this.prisma.messageQueue.findMany(args);
  }
  async messageQueue(
    args: Prisma.MessageQueueFindUniqueArgs
  ): Promise<PrismaMessageQueue | null> {
    return this.prisma.messageQueue.findUnique(args);
  }
  async createMessageQueue(
    args: Prisma.MessageQueueCreateArgs
  ): Promise<PrismaMessageQueue> {
    return this.prisma.messageQueue.create(args);
  }
  async updateMessageQueue(
    args: Prisma.MessageQueueUpdateArgs
  ): Promise<PrismaMessageQueue> {
    return this.prisma.messageQueue.update(args);
  }
  async deleteMessageQueue(
    args: Prisma.MessageQueueDeleteArgs
  ): Promise<PrismaMessageQueue> {
    return this.prisma.messageQueue.delete(args);
  }

  async findNotificationAttempts(
    parentId: string,
    args: Prisma.NotificationAttemptFindManyArgs
  ): Promise<PrismaNotificationAttempt[]> {
    return this.prisma.messageQueue
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .notificationAttempts(args);
  }

  async findProcessorLogs(
    parentId: string,
    args: Prisma.ProcessorLogFindManyArgs
  ): Promise<PrismaProcessorLog[]> {
    return this.prisma.messageQueue
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .processorLogs(args);
  }
}
