/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  NotificationAttempt as PrismaNotificationAttempt,
  MessageQueue as PrismaMessageQueue,
} from "@prisma/client";

export class NotificationAttemptServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NotificationAttemptCountArgs, "select">
  ): Promise<number> {
    return this.prisma.notificationAttempt.count(args);
  }

  async notificationAttempts(
    args: Prisma.NotificationAttemptFindManyArgs
  ): Promise<PrismaNotificationAttempt[]> {
    return this.prisma.notificationAttempt.findMany(args);
  }
  async notificationAttempt(
    args: Prisma.NotificationAttemptFindUniqueArgs
  ): Promise<PrismaNotificationAttempt | null> {
    return this.prisma.notificationAttempt.findUnique(args);
  }
  async createNotificationAttempt(
    args: Prisma.NotificationAttemptCreateArgs
  ): Promise<PrismaNotificationAttempt> {
    return this.prisma.notificationAttempt.create(args);
  }
  async updateNotificationAttempt(
    args: Prisma.NotificationAttemptUpdateArgs
  ): Promise<PrismaNotificationAttempt> {
    return this.prisma.notificationAttempt.update(args);
  }
  async deleteNotificationAttempt(
    args: Prisma.NotificationAttemptDeleteArgs
  ): Promise<PrismaNotificationAttempt> {
    return this.prisma.notificationAttempt.delete(args);
  }

  async getMessageQueue(parentId: string): Promise<PrismaMessageQueue | null> {
    return this.prisma.notificationAttempt
      .findUnique({
        where: { id: parentId },
      })
      .messageQueue();
  }
}
