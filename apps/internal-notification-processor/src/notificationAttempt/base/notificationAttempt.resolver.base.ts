/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { NotificationAttempt } from "./NotificationAttempt";
import { NotificationAttemptCountArgs } from "./NotificationAttemptCountArgs";
import { NotificationAttemptFindManyArgs } from "./NotificationAttemptFindManyArgs";
import { NotificationAttemptFindUniqueArgs } from "./NotificationAttemptFindUniqueArgs";
import { CreateNotificationAttemptArgs } from "./CreateNotificationAttemptArgs";
import { UpdateNotificationAttemptArgs } from "./UpdateNotificationAttemptArgs";
import { DeleteNotificationAttemptArgs } from "./DeleteNotificationAttemptArgs";
import { MessageQueue } from "../../messageQueue/base/MessageQueue";
import { NotificationAttemptService } from "../notificationAttempt.service";
@graphql.Resolver(() => NotificationAttempt)
export class NotificationAttemptResolverBase {
  constructor(protected readonly service: NotificationAttemptService) {}

  async _notificationAttemptsMeta(
    @graphql.Args() args: NotificationAttemptCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [NotificationAttempt])
  async notificationAttempts(
    @graphql.Args() args: NotificationAttemptFindManyArgs
  ): Promise<NotificationAttempt[]> {
    return this.service.notificationAttempts(args);
  }

  @graphql.Query(() => NotificationAttempt, { nullable: true })
  async notificationAttempt(
    @graphql.Args() args: NotificationAttemptFindUniqueArgs
  ): Promise<NotificationAttempt | null> {
    const result = await this.service.notificationAttempt(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => NotificationAttempt)
  async createNotificationAttempt(
    @graphql.Args() args: CreateNotificationAttemptArgs
  ): Promise<NotificationAttempt> {
    return await this.service.createNotificationAttempt({
      ...args,
      data: {
        ...args.data,

        messageQueue: args.data.messageQueue
          ? {
              connect: args.data.messageQueue,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => NotificationAttempt)
  async updateNotificationAttempt(
    @graphql.Args() args: UpdateNotificationAttemptArgs
  ): Promise<NotificationAttempt | null> {
    try {
      return await this.service.updateNotificationAttempt({
        ...args,
        data: {
          ...args.data,

          messageQueue: args.data.messageQueue
            ? {
                connect: args.data.messageQueue,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => NotificationAttempt)
  async deleteNotificationAttempt(
    @graphql.Args() args: DeleteNotificationAttemptArgs
  ): Promise<NotificationAttempt | null> {
    try {
      return await this.service.deleteNotificationAttempt(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => MessageQueue, {
    nullable: true,
    name: "messageQueue",
  })
  async getMessageQueue(
    @graphql.Parent() parent: NotificationAttempt
  ): Promise<MessageQueue | null> {
    const result = await this.service.getMessageQueue(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
