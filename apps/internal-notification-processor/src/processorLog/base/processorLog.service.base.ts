/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ProcessorLog as PrismaProcessorLog,
  MessageQueue as PrismaMessageQueue,
} from "@prisma/client";

export class ProcessorLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProcessorLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.processorLog.count(args);
  }

  async processorLogs(
    args: Prisma.ProcessorLogFindManyArgs
  ): Promise<PrismaProcessorLog[]> {
    return this.prisma.processorLog.findMany(args);
  }
  async processorLog(
    args: Prisma.ProcessorLogFindUniqueArgs
  ): Promise<PrismaProcessorLog | null> {
    return this.prisma.processorLog.findUnique(args);
  }
  async createProcessorLog(
    args: Prisma.ProcessorLogCreateArgs
  ): Promise<PrismaProcessorLog> {
    return this.prisma.processorLog.create(args);
  }
  async updateProcessorLog(
    args: Prisma.ProcessorLogUpdateArgs
  ): Promise<PrismaProcessorLog> {
    return this.prisma.processorLog.update(args);
  }
  async deleteProcessorLog(
    args: Prisma.ProcessorLogDeleteArgs
  ): Promise<PrismaProcessorLog> {
    return this.prisma.processorLog.delete(args);
  }

  async getMessageQueue(parentId: string): Promise<PrismaMessageQueue | null> {
    return this.prisma.processorLog
      .findUnique({
        where: { id: parentId },
      })
      .messageQueue();
  }
}
