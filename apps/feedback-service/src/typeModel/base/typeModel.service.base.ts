/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TypeModel as PrismaTypeModel,
  Review as PrismaReview,
} from "@prisma/client";

export class TypeModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TypeModelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.typeModel.count(args);
  }

  async typeModels(
    args: Prisma.TypeModelFindManyArgs
  ): Promise<PrismaTypeModel[]> {
    return this.prisma.typeModel.findMany(args);
  }
  async typeModel(
    args: Prisma.TypeModelFindUniqueArgs
  ): Promise<PrismaTypeModel | null> {
    return this.prisma.typeModel.findUnique(args);
  }
  async createTypeModel(
    args: Prisma.TypeModelCreateArgs
  ): Promise<PrismaTypeModel> {
    return this.prisma.typeModel.create(args);
  }
  async updateTypeModel(
    args: Prisma.TypeModelUpdateArgs
  ): Promise<PrismaTypeModel> {
    return this.prisma.typeModel.update(args);
  }
  async deleteTypeModel(
    args: Prisma.TypeModelDeleteArgs
  ): Promise<PrismaTypeModel> {
    return this.prisma.typeModel.delete(args);
  }

  async findReviews(
    parentId: string,
    args: Prisma.ReviewFindManyArgs
  ): Promise<PrismaReview[]> {
    return this.prisma.typeModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reviews(args);
  }
}
