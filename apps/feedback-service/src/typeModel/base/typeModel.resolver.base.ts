/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TypeModel } from "./TypeModel";
import { TypeModelCountArgs } from "./TypeModelCountArgs";
import { TypeModelFindManyArgs } from "./TypeModelFindManyArgs";
import { TypeModelFindUniqueArgs } from "./TypeModelFindUniqueArgs";
import { CreateTypeModelArgs } from "./CreateTypeModelArgs";
import { UpdateTypeModelArgs } from "./UpdateTypeModelArgs";
import { DeleteTypeModelArgs } from "./DeleteTypeModelArgs";
import { ReviewFindManyArgs } from "../../review/base/ReviewFindManyArgs";
import { Review } from "../../review/base/Review";
import { TypeModelService } from "../typeModel.service";
@graphql.Resolver(() => TypeModel)
export class TypeModelResolverBase {
  constructor(protected readonly service: TypeModelService) {}

  async _typeModelsMeta(
    @graphql.Args() args: TypeModelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TypeModel])
  async typeModels(
    @graphql.Args() args: TypeModelFindManyArgs
  ): Promise<TypeModel[]> {
    return this.service.typeModels(args);
  }

  @graphql.Query(() => TypeModel, { nullable: true })
  async typeModel(
    @graphql.Args() args: TypeModelFindUniqueArgs
  ): Promise<TypeModel | null> {
    const result = await this.service.typeModel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TypeModel)
  async createTypeModel(
    @graphql.Args() args: CreateTypeModelArgs
  ): Promise<TypeModel> {
    return await this.service.createTypeModel({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TypeModel)
  async updateTypeModel(
    @graphql.Args() args: UpdateTypeModelArgs
  ): Promise<TypeModel | null> {
    try {
      return await this.service.updateTypeModel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TypeModel)
  async deleteTypeModel(
    @graphql.Args() args: DeleteTypeModelArgs
  ): Promise<TypeModel | null> {
    try {
      return await this.service.deleteTypeModel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Review], { name: "reviews" })
  async findReviews(
    @graphql.Parent() parent: TypeModel,
    @graphql.Args() args: ReviewFindManyArgs
  ): Promise<Review[]> {
    const results = await this.service.findReviews(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
